#!/bin/bash

#  dvbserver
#
#  http server. IP TV proxy
#  Uses mumudvb to get video/audio channels from several dvb cards.
#
#  When a channel is required,
#  dvbserver starts mumudvb sessions to any available dvb adapter
#  and redirects clients to the corresponding http stream.
#  Also, ends the mumudvb sessions at client disconnection.
#
#  $Revision: 1.2 $
#
#  Copyright (C) 2023-2023 Jordi Pujol <jordipujolp AT gmail DOT com>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3, or (at your option)
#  any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#************************************************************************

_trim() {
	printf '%s\n' "${@}" | \
	sed -re "/^[[:blank:]]+|[[:blank:]]+$/s///g"
}

usage() {
	echo "${NAME} -u|--url URL" \
		"-s|--start d/t" \
		"-e|--end d/t" \
		"-i|--interval sec" \
		"-p|--pgm PGM" \
		"-y|--yes" \
		"-h|--help"
	echo
	echo "-u|--url URL"
	echo "DVB broadcast URL, protocol + IP + path."
	echo
	echo "-s|--start date/time"
	echo "date/time to start the capture."
	echo
	echo "-e|--end date/time"
	echo "date/time to end."
	echo
	echo "-i|--interval timestamp/seconds"
	echo "split the capture in seconds of time."
	echo
	echo "-p|--pgm pgm"
	echo "program that captures the video, ffmpeg or vlc."
	echo
	echo "-y|--yes"
	echo "don't request user confirmation."
	echo
	echo "-h|--help"
	echo "shows a help text."
	echo
	echo "To schedule a capture, run the script."
}

_exit() {
	trap - EXIT INT
	set +o errexit +o nounset -o pipefail +o noglob
	echo "exit" >&2
	echo >&2
	wait || :
}

LoadConfig() {
	local config service name data conffile line ind \
		msg="Loading configuration"

	mkdir -p "${TMPDIR}"
	mkdir -p -m 0755 "/run/mumudvb"
	chown -R _dvb:video "/run/mumudvb"

	ReloadConfig="y"
	# config variables, default values
	Debug=""
	PortHttp=4000

	UpdateReport="y"
	Msgs=""
	MsgsInfo=""
	Adapters=${NONE}
	Configs=${NONE}
	rm -f "${VARS}"
	: > "${STATFILE}"
	AddMsg "${msg}"
	PreBackupRotate

	[ ! -s "/etc/default/${NAME}" ] || \
		. "/etc/default/${NAME}"

	unset $(set | awk -F '=' \
		'$1 ~ /^(adapter|config)[[:digit:]]*_/ {print $1}') 2> /dev/null || :
	ind=0
	while read -r line; do
		case "${ind}" in
		0)
			data="$(sed -nre '/Info:[ ]+DVB:[ =]+Card ([[:digit:]]+) - Tuner ([[:digit:]]+) [=]+/{s//\1 \2/;p;q};${q1}' <<< "${line}")" || \
				continue
			let "Adapters++,1"
			eval adapter${Adapters}_card='${data%% *}'
			eval adapter${Adapters}_tuner='${data##* }'
			let "ind++,1"
			;;
		1)
			if data="$(sed -nre '/Info:  DVB:   Frontend : ([[:alnum:]]+)/{s//\1/;p;q};${q1}' <<< "${line}")"; then
				eval adapter${Adapters}_name='$(_trim "${data}")'
				let "ind++,1"
			else
				ind=0
			fi
			;;
		2)
			if data="$(sed -nre '/Info:  DVB:[[:blank:]]+([^[:blank:]].*)/{s//\1/;p;q};${q1}' \
			<<< "${line}")"; then
				case "$(_trim "${data}")" in
				Terrestrial*) data="dvbt" ;;
				Satellite*) data="dvbc" ;;
				Cable*) data="dvbs" ;;
				ATSC*) data="atsc" ;;
				*) ind=0; continue ;;
				esac
				eval adapter${Adapters}_dvbtype='${data}'
				let "ind++,1"
			else
				ind=0
			fi
			;;
		3)
			if data="$(sed -nre '/Info:  DVB:   Frequency: ([[:digit:]]+) kHz to ([[:digit:]]+) kHz/{s//\1 \2/;p;q};${q1}' <<< "${line}")"; then
				eval adapter${Adapters}_freqmin='${data%% *}'
				eval adapter${Adapters}_freqmax='${data##* }'
			fi
			ind=0
			;;
		esac
	done < <(mumudvb --list-cards 2>&1)

	while read -r conffile; do
		let "Configs++,1"
		eval config${Configs}_conffile='${conffile}'
		eval config${Configs}_dvbtype='$(basename "${conffile}" | cut -f 1 -s -d '_')'

		name=""
		service_id=""
		while read -r line; do
			case "${line}" in
			freq=*) eval config${Configs}_freq='${line##*=}' ;;
			name=*) name="${line##*=}" ;;
			service_id=*) service_id="${line##*=}" ;;
			*)
				[ -n "${name}" -a -n "${service_id}" ] || \
					continue
				eval config${Configs}_service_${service_id}='${name}'
				name=""
				service_id=""
				;;
			esac
		done < "${conffile}"
		[ -z "${name}" -o -z "${service_id}" ] || \
			eval config${Configs}_service_${service_id}='${name}'
	done < <(ls -1 /etc/mumudvb/{dvbt,dvbc,dvbs,atsc}_*.conf 2> /dev/null)

	{ printf '%s\n' "#EXTM3U"
	for config in $(seq ${Configs}); do
		let "portHttp=PortHttp+config,1"
		systemctl restart dvbserver-proxy@${portHttp}.socket
		eval dvbtype=\"\${config${config}_dvbtype:-}\"
		while read service name; do
			printf '%s:%s,%s %s\n' \
				"#EXTINF" "${service}" \
				"${dvbtype}" "${name}"
			printf '%s\n' \
				"http://$(hostname):${portHttp}/bysid/${service}"
		done < <(set | \
		sed -nre "/^config${config}_service_([[:digit:]]+)=(.*)/s//\1 \2/p")
	done
	} > "${PLAYLIST}"

	ReloadConfig=""
}

Main() {
	# constants
	readonly NAME APPNAME="${NAME}" \
		TMPDIR="/var/log/${NAME}/"
	readonly VARS="${TMPDIR}vars" \
		LOGFILE="${TMPDIR}log.txt" \
		STATFILE="${TMPDIR}stat.txt" \
		PLAYLIST="${TMPDIR}playlist.m3u" \
		IRELOAD="HUP" ISTAT="USR2" \
		OK=0 ERR=1 \
		LF=$'\n' TAB=$'\t' BEL=$'\x07' SPACE=' \t\n\r' \
		NONE=0
	# config variables
	local Debug PortHttp
	# internal variables, daemon scope
	local ReloadConfig Adapters Configs

	trap '_exit' EXIT
	trap 'exit' INT

	LoadConfig || \
		exit 1

	set | \
		awk '/^(adapter|config)[[:digit:]]*_|^PortHttp/ {print}' > "${VARS}"

	trap '[ -n "${ReloadConfig}" ] || { ReloadConfig="y"; }' "${IRELOAD}"
	trap 'ListStatus' "${ISTAT}"

	while : ; do
		sleep 10
	done
}

set -o errexit -o nounset -o pipefail +o noglob +o noclobber

declare -ar ARGV=("${@}")
readonly ARGC=${#}
NAME="$(basename "${0}")"

# iptables -I INPUT -p tcp -m tcp --dport 5901 -m state --state NEW  -j LOG --log-level 1 --log-prefix "New Connection "
# --match multiport --dports 110,143,993,995
# iptables -A INPUT -p tcp --match multiport --dports 1024:3000 -j ACCEPT
# journalctl --follow --grep="New Connection.*DPT=5901"
# -g, --grep=
# 
#            Filter output to entries where the MESSAGE= field matches the specified regular expression. PERL-compatible regular expressions are used, see pcre2pattern(3) for a detailed description of the
#            syntax.
# 
#            If the pattern is all lowercase, matching is case insensitive. Otherwise, matching is case sensitive. This can be overridden with the --case-sensitive option, see below.

case "${1:-}" in
start)
	shift
	Main "${@}"
	;;
*)
	echo "Wrong arguments" >&2
	exit 1
	;;
esac
